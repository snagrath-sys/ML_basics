# -*- coding: utf-8 -*-
"""Logistic_regression_Titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/103N1KY55-z4rrCd14uxX4THMyqD0kwKr
"""

#Import all dependencies
from google.colab import files
import pandas as pd
import io
import matplotlib.pyplot as plt
import seaborn as sns
import statistics as stat
import numpy as np
import math

#Upload data
upload_train=files.upload()
upload_test=files.upload()
train_df = pd.read_csv(io.BytesIO(upload_train['train.csv']))
test_df=pd.read_csv(io.BytesIO(upload_test['test.csv']))

#Data analysis
train_df.head()
train_df.corr()
#PassengerId has very poor correlation with Survival, so can be ignored
#Pclass is negatively correlated to Survival chances- absolute value is close to 1, so strong correlation:i,e 3rd class passengers have least chances of survival
#Fare has a good strong direct correlation to survival
train_df['Age'].value_counts()
train_df.plot(x='Age',y='Survived',kind='scatter')
train_df['SibSp'].value_counts()
train_df.plot(x='SibSp',y='Survived',kind='scatter')
train_df['Parch'].value_counts()
train_df.plot(x='Parch',y='Survived',kind='scatter')

#Initializing X_train and Y_train
X_train=train_df[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']].copy()
Y_train=train_df.Survived

#Convert categorical columns to integer codes to be able to feed to model
Sex=pd.get_dummies(X_train.Sex,drop_first=True,prefix='Sex')
Port=pd.get_dummies(X_train.Embarked,drop_first=True,prefix='Port')
X_train=pd.concat([X_train,Sex,Port],axis=1)
X_train=X_train.drop(['Sex','Embarked'],axis=1)

#Fill nan values with 0 to get accurate results
X_train.head()
X_train['Pclass'] = X_train['Pclass'].fillna(0)
X_train['Age'] = X_train['Age'].fillna(0)
X_train['SibSp'] = X_train['SibSp'].fillna(0)
X_train['Parch'] = X_train['Parch'].fillna(0)
X_train['Fare'] = X_train['Fare'].fillna(0)
X_train['Sex_male'] = X_train['Sex_male'].fillna(0)
X_train['Port_Q'] = X_train['Port_Q'].fillna(0)
X_train['Port_S'] = X_train['Port_S'].fillna(0)

#Calculating m and n
m=len(X_train.index)
n=len(X_train.columns)
step_size=0.01

np.shape(Y_train)
Y_train=np.array(Y_train)
Y_train=Y_train.reshape(m,1)
np.shape(Y_train)

#Initializing theta
theta=[0*1]*8
theta=np.array(theta)
theta=theta.reshape(8,1 )
np.shape(theta)

z=np.dot(X_train,theta)
z

np.shape(z)

hypo=(1/(1+np.exp(-1*z)))
hypo

#np.shape(hypo)
np.shape(Y_train)

#Gradient descent
for i in range(100):
  theta=theta-((step_size/m)*(np.dot((hypo-Y_train).T,X_train)).T)

theta

test_df.head()
X_test=test_df[['Pclass','Sex','Age','SibSp','Parch','Fare','Embarked']].copy()
Sex=pd.get_dummies(X_test.Sex,drop_first=True,prefix='Sex')
Port=pd.get_dummies(X_test.Embarked,drop_first=True,prefix='Port')
X_test=pd.concat([X_test,Sex,Port],axis=1)
X_test=X_test.drop(['Sex','Embarked'],axis=1)

X_test['Pclass'] = X_test['Pclass'].fillna(0)
X_test['Age'] = X_test['Age'].fillna(0)
X_test['SibSp'] = X_test['SibSp'].fillna(0)
X_test['Parch'] = X_test['Parch'].fillna(0)
X_test['Fare'] = X_test['Fare'].fillna(0)
X_test['Sex_male'] = X_test['Sex_male'].fillna(0)
X_test['Port_Q'] = X_test['Port_Q'].fillna(0)
X_test['Port_S'] = X_test['Port_S'].fillna(0)

np.shape(X_test)

z_pred=np.dot(X_test,theta)

y_pred=(1/(1+np.exp(-1*z_pred)))
y_pred=pd.DataFrame(y_pred)
y_pred=pd.concat([test_df.PassengerId,y_pred],axis=1)
y_pred.head()
y_pred.columns=['PassengerId','Survived']
y_pred.head()

for i in range(np.shape(y_pred)[0]):
  if y_pred.Survived[i]>=0.5:
    y_pred.Survived[i]=1
  else:
    y_pred.Survived[i]=0

y_pred

y_pred.to_csv('Predict.csv')

